@model int?

@using SmartStore.Core.Domain.Media;
@using SmartStore.Core.Domain.Catalog;
@using SmartStore.Services.Media;
@using SmartStore.Web.Framework.UI;
@using SmartStore.Utilities;

@functions {
    private bool TransientUpload
    {
        get
        {
            return GetMetadata<bool>("transientUpload");
        }
    }

    private bool Compact
    {
        get
        {
            return GetMetadata<bool>("compact");
        }
    }

    private string Path
    {
        get
        {
            return GetMetadata<string>("path") ?? GetMetadata<string>("album");
        }
    }

    private string TypeFilter
    {
        get
        {
            return GetMetadata<string>("typeFilter", "image");
        }
    }

    private int EntityId
    {
        get
        {
            return GetMetadata<int>("entityId");
        }
    }

    private string EntityType
    {
        get
        {
            return GetMetadata<string>("entityType");
        }
    }

    private string DeleteUrl
    {
        get
        {
            return GetMetadata<string>("deleteUrl");
        }
    }

    private string SortUrl
    {
        get
        {
            return GetMetadata<string>("sortUrl");
        }
    }

    private string EntityAssignmentUrl
    {
        get
        {
            return GetMetadata<string>("entityAssignmentUrl");
        }
    }

    // TODO: make enum UploadType > Compact, Default, Multifile
    private bool MultiFile
    {
        get
        {
            return GetMetadata<bool>("multifile");
        }
    }

    private IEnumerable<IMediaFile> UploadedFiles
    {
        get
        {
            return GetMetadata<IEnumerable<IMediaFile>>("uploadedFiles");
        }
    }
}

@{
	var random = CommonHelper.GenerateRandomInteger();
	var mediaService = this.CommonServices.MediaService;
	var mediaSettings = this.CommonServices.Resolve<MediaSettings>();
}

<div class="fileupload-container@(Compact ? " compact" : "")">
	<div @Html.Attr("class", "dropzone-container", !MultiFile)>

		@if (!MultiFile)
		{
			// Single file uploads have preview images.
			<div class="fileupload-thumb-stage">
				<div class="fileupload-thumb" style="background-image: url('@Url.Media(Model, mediaSettings.ProductThumbPictureSize)')">
					@Html.HiddenFor(x => x, new { @class = "hidden" })
				</div>
			</div>
		}

		<div class="fileupload-controls">
			@*
				TODO: If multiupload > other MediaTypes may be have to be configured. Should be a property of this editor template.
                TODO: (mm) (mc) take "typeFilter" into account while uploading files or opening media manager for browsing."
			*@

			@(Html.SmartStore().FileUploader()
				.UploadUrl(Url.Action("Upload", "Media", new { isTransient = TransientUpload, path = Path, area = "Admin" }))
				.Path(Path)
				.HtmlAttribute("data-fallback-url", mediaService.GetFallbackUrl(mediaSettings.ProductThumbPictureSize))
                .TypeFilter(TypeFilter)
				.AcceptedFileTypes(mediaSettings.ImageTypes)
				.ShowRemoveButton(!MultiFile && Model.HasValue) // Multifile uploads don't need a remove button
				.ShowRemoveButtonAfterUpload(true)
				.Compact(Compact)
				.PreviewContainerId("preview-" + random)
				.Multifile(MultiFile)
				.MainFileId(Model)
				.UploadedFiles(UploadedFiles)
				.EntityType("Product")
				.EntityId(EntityId)
				.DeleteUrl(DeleteUrl)
				.SortUrl(SortUrl)
				.EntityAssignmentUrl(EntityAssignmentUrl)
			)
		</div>
	</div>

	<div class="fileupload-progress">
		<!-- The single upload progress bar -->
		<div class="progress">
			<div class="progress-bar" role="progressbar" style="width: 0%" aria-valuemin="0" aria-valuemax="100"></div>
		</div>
	</div>
</div>